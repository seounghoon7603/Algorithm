# 소수 : 1과 자기  자신으로만 나우어 떨어지는 자연수
# 특정 수 N이 소수인지 판별하는 문제
import math

#소수 판별 함수 ( 제곱근까지만 확인하면 됨) # O(N 의 1/2승)
def is_prime_number(x):
  # 2부터 (x-1) 까지의 모든 수를 확인
  for i in range(2,int(math.sqrt(x))+1):
    # x가 해당 수로 나누어 떨어지면
    if x % i == 0:
      return False #소수아님  
  return True #소수임

# 1부터 N까지 모든 소수 출력해야 하는 문제
# 에라토스테네스의 체 : 여러 개의 수가 소수인지 아닌지 판별할 때 사용하는 대표적 알고리즘.
# N보다 작거나 같은 모든 소수를 찾을 때 사용
# 1. 2부터 N까지의 모든 자연수를 나열한다.
# 2. 남은 수 중에서 아직 처리하지 않은 가장 작은 수 i를 찾는다.
# 3. 남은 수 중에서 i의 배수를 모두 제거한다(i는 제거하지 않는다.)
# 4. 더 이상 반복할 수 없을 때까지 2번과 3번의 과정 반복 
import math

n = 1000 # 2부터 1,000까지의 모든 수에 대해 소수 판별
array = [True for i in range(n+1)] # 처음 모든 수가 소수인것으로 초기화

# 에라토스테네스의 체 알고리즘
for i in range(2, int(math.sqrt(n))+1): #2부터 n의 제곱근까지 모든 수를 확인하며
  if array[i] == True: #i가 소수인경우 
    # i를 제외한 i의 모든 배수 지우기
    j = 2
    while i*j <= n:
      array[i*j] = False
      j += 1

#모든 소수 출력
for i in range(2, n+1):
  if array[i]:
    print(i, end=' ')

# 상당히 빠르지만 메모리를 N개만큼 잡아먹음 - N이 1,000,000 이내로 주어질 경우 사용