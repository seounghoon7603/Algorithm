# 투 포인터 알고리즘
# 리스트에 순차적으로 접근해야 할 때 2개의 점의 위치를 기록하면서 처리하는 알고리즘
# ex) 한반에 40명의 학생이 있을때, 모든 학생을 번호순대로 세운 뒤, 순차적으로 지목해야 할 경우. 2,3,4,5,6,7번 학생을 지목해야 할 때, 우리는 번호로 한명씩 부르기보다 2번부터 7번까지의 학생이라고 부를수 있다. - 리스트에 담긴 데이터를 순차적으로 접근해야 할 떄는 '시작점' '끝점' 2개의 점으로 접근할 데이터의 범위를 표현할 수 있다.

# 특정한 합을 가지는 부분 연속 수열 찾기 문제
# 양의 정수로만 구성된 리스트가 주어졌을 때, 그 부분 연속 수열 중에서 '특정한 합'을 갖는 수열의 개수를 출력하는 문제
#ex) 1,2,3,2,5 리스트에서 합이 5인 경우 ( [2,3], [3,2], [5] 3가지경우가 나옴 )

# 1. 시작점(start)과 끝점(end)이 첫 번째 원소의 인덱스(0)를 가리키도록 한다.
# 2. 현재 부분합이 M과 같다면 카운트 한다.
# 3. 현재 부분합이 M보다 작으면 end값을 1증가시킨다.
# 4. 현재 부분합이 M보다 크거나 같으면 start값을 1증가시킨다.
# 5. 모든 경우를 확인할 때까지 2번부터 4번까지 과정 반복
n = 5 # 데이터개수
m = 5 # 찾고자 하는 부분합
data = [1,2,3,2,5] # 전체 수열

count = 0
interval_sum = 0
end = 0

for start in range(n):
  # end 가능한 만큼 이동시키기
  while interval_sum < m and end < n:
    interval_sum += data[end]
    end += 1
  # 부분합 m일 때 카운트 증가
  if interval_sum == m:
    count += 1
  interval_sum -= data[start]

print(count)

# 정렬되어 있는 두 리스트의 합집합 구하기
n,m = 3,4
a = [1,3,5]
b = [2,4,6,7]

result = [0] * (n+m)
i,j,k = 0,0,0

while i<n or j<m:
  if j == m or ( i < n and a[i] < b[j]):
    result[k] = a[i]
    i += 1
  else:
    result[k] = b[j]
    j += 1
  k += 1

for i in result:
  print(i, end=' ')
